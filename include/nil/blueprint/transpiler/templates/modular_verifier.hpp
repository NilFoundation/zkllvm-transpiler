#ifndef __MODULAR_VERIFIER_CONTRACT_TEMPLATE_HPP__
#define __MODULAR_VERIFIER_CONTRACT_TEMPLATE_HPP__

#include <string>

namespace nil {
    namespace blueprint {
        std::string modular_verifier_template = R"(
// SPDX-License-Identifier: Apache-2.0.
//---------------------------------------------------------------------------//
// Copyright (c) Generated by zkllvm-transpiler
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//---------------------------------------------------------------------------//
pragma solidity >=0.8.4;

import "../../cryptography/transcript.sol";
// Move away unused structures from types.sol
import "../../types.sol";
import "../../basic_marshalling.sol";
import "../../interfaces/modular_verifier.sol";
import "./commitment.sol";
import "./gate_argument.sol";
import "./lookup_argument.sol";
import "./permutation_argument.sol";
import "hardhat/console.sol";
import "../../algebra/field.sol";

contract modular_verifier_$TEST_NAME$ is IModularVerifier{
    uint256 constant modulus = $MODULUS$;
    bool    constant use_lookups = false;
    bytes32 constant vk1 = bytes32($VERIFICATION_KEY1$);
    bytes32 constant vk2 = bytes32($VERIFICATION_KEY2$);
    bytes32 transcript_state;
    address _gate_argument_address;
    address _permutation_argument_address;
    address _lookup_argument_address;
    address _commitment_contract_address;
    uint64 constant sorted_columns = $SORTED_COLUMNS_NUMBER$;
    uint64   constant f_parts = 8;   // Individually on parts
    uint64  constant z_offset = $Z_OFFSET$;
    uint64  constant table_offset = z_offset + 0x80 * $PERMUTATION_SIZE$ + 0xc0;
    uint64  constant table_end_offset = table_offset + $PERMUTATION_TABLE_OFFSET$;
    uint64  constant quotient_offset = $QUOTIENT_OFFSET$;
    uint64  constant rows_amount = $ROWS_AMOUNT$;
    uint256 constant omega = $OMEGA$;
    uint256 constant special_selectors_offset = z_offset + $PERMUTATION_SIZE$ * 0x80;

    function initialize(
//        address permutation_argument_address,
//        address lookup_argument_address, 
//        address gate_argument_address,
        address commitment_contract_address
    ) public{
        console.log("Initialize");
        types.transcript_data memory tr_state;
        transcript.init_transcript(tr_state, hex"");
        transcript.update_transcript_b32(tr_state, vk1);
        transcript.update_transcript_b32(tr_state, vk2);

//      _gate_argument_address = gate_argument_address;
//      _permutation_argument_address = permutation_argument_address;
//      _lookup_argument_address = lookup_argument_address;
        _commitment_contract_address = commitment_contract_address;

        ICommitmentScheme commitment_scheme = ICommitmentScheme(commitment_contract_address);
        tr_state.current_challenge = commitment_scheme.initialize(tr_state.current_challenge);
        transcript_state = tr_state.current_challenge;
    }

    function verify(
        bytes calldata blob
    ) public view{
        uint256 gas = gasleft();
        uint256 xi = basic_marshalling.get_uint256_be(blob, $EVAL_PROOF_OFFSET$);
        uint256 Z_at_xi = addmod(field.pow_small(xi, rows_amount, modulus), modulus-1, modulus);
        uint256 l0 = mulmod(
            Z_at_xi, 
            field.inverse_static(mulmod(addmod(xi, modulus - 1, modulus), rows_amount, modulus), modulus), 
            modulus
        );
        uint256[f_parts] memory F;

        console.log("l0 = ", l0);

        //0. Check proof size
        // No direct public input

        //1. Init transcript        
        types.transcript_data memory tr_state;
        tr_state.current_challenge = transcript_state;
        // TODO: Just do something with it

        {
            //2. Push variable_values commitment to transcript
            transcript.update_transcript_b32_by_offset_calldata(tr_state, blob, 0x9);

            //3. Permutation argument
            uint256[3] memory permutation_argument = modular_permutation_argument_$TEST_NAME$.verify(
                blob[$Z_OFFSET$:$TABLE_Z_OFFSET$+$QUOTIENT_OFFSET$], 
                transcript.get_field_challenge(tr_state, modulus), 
                transcript.get_field_challenge(tr_state, modulus),
                l0
            );
            F[0] = permutation_argument[0];
            F[1] = permutation_argument[1];
            F[2] = permutation_argument[2];
        }

        $LOOKUP_LIBRARY_CALL$

        //5. Push permutation batch to transcript
        transcript.update_transcript_b32_by_offset_calldata(tr_state, blob, 0x31);

        {
            //6. Gate argument
            F[7] = modular_gate_argument_$TEST_NAME$.verify(blob[table_offset:table_end_offset], transcript.get_field_challenge(tr_state, modulus));
        }

        // No public input gate

        uint256 F_consolidated;
        {
            //7. Push quotient to transcript
            for( uint8 i = 0; i < f_parts;){
                F_consolidated = addmod(F_consolidated, mulmod(F[i],transcript.get_field_challenge(tr_state, modulus), modulus), modulus);
                unchecked{i++;}
            }
            uint256 points_num = basic_marshalling.get_length(blob, $EVAL_PROOF_OFFSET$ + 0x20);
            console.log(points_num);
            transcript.update_transcript_b32_by_offset_calldata(tr_state, blob, 0x59);
        }

        //8. Commitment scheme verify_eval
        {
            ICommitmentScheme commitment_scheme = ICommitmentScheme(_commitment_contract_address);
            uint256[5] memory commitments;
            commitments[0] = uint256(vk2);
            for(uint16 i = 1; i < $BATCHES_NUM$;){
                commitments[i] = basic_marshalling.get_uint256_be(blob, 0x9 + (i-1)*(0x28));
                unchecked{i++;}
            }
            if(!commitment_scheme.verify_eval(
                blob[z_offset - 0x8:], commitments, xi, tr_state.current_challenge
            )) {
                console.log("Error from commitment scheme!");
                return;                
            }
        }

        //9. Final check
        {
            uint256 T_consolidated;
            uint256 factor = 1;
            for(uint64 i = 0; i < uint64(uint8(blob[z_offset + basic_marshalling.get_length(blob, z_offset - 0x8) *0x20 + 0xf]));){
                T_consolidated = addmod(
                    T_consolidated, 
                    mulmod(basic_marshalling.get_uint256_be(blob, table_offset + quotient_offset + i *0x20), factor, modulus), 
                    modulus
                );
                factor = mulmod(factor, Z_at_xi + 1, modulus);
                unchecked{i++;}
            }
            console.log("T_consolidated = ", T_consolidated);
            if( F_consolidated == mulmod(T_consolidated, Z_at_xi, modulus) ) console.log("SUCCESS!");
        }

        console.log("F[0] = ", F[0]);
        console.log("F[1] = ", F[1]);
        console.log("F[2] = ", F[2]);
        console.log("F[3] = ", F[3]);
        console.log("F[4] = ", F[4]);
        console.log("F[5] = ", F[5]);
        console.log("F[6] = ", F[6]);
        console.log("F[7] = ", F[7]);
        console.log("F_consolidated = ", F_consolidated);
        console.log("Gas for verification:", gas-gasleft());
    }
}            
        )";
    }
}

#endif //__MODULAR_CONTRACT_TEMPLATE_HPP__