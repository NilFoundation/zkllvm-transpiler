#ifndef __MODULAR_CONTRACT_TEMPLATE_HPP__
#define __MODULAR_CONTRACT_TEMPLATE_HPP__

#include <string>

namespace nil {
    namespace blueprint {
        std::string lookup_library_call = R"(
        {
            ( , tr_state.current_challenge) = modular_lookup_argument_$TEST_NAME$.verify(
                blob[table_offset: table_offset + table_points_num*0x20], 
                blob[table_offset:z_end], 
                basic_marshalling.get_uint256_be(blob, 0x81), 
                tr_state.current_challenge
            );
        }
        )";

        std::string modular_verifier_template = R"(
// SPDX-License-Identifier: Apache-2.0.
//---------------------------------------------------------------------------//
// Copyright (c) Generated by zkllvm-transpiler
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//---------------------------------------------------------------------------//
pragma solidity >=0.8.4;

import "../../cryptography/transcript.sol";
// Move away unused structures from types.sol
import "../../types.sol";
import "../../basic_marshalling.sol";
import "../../interfaces/modular_verifier.sol";
import "./commitment.sol";
import "./gate_argument.sol";
import "./lookup_argument.sol";
import "./permutation_argument.sol";
import "hardhat/console.sol";
import "../../algebra/field.sol";

contract modular_verifier_$TEST_NAME$ is IModularVerifier{
    uint256 constant modulus = $MODULUS$;
    bool    constant use_lookups = false;
    bytes32 constant vk1 = bytes32($VERIFICATION_KEY1$);
    bytes32 constant vk2 = bytes32($VERIFICATION_KEY2$);
    bytes32 transcript_state;
    address _gate_argument_address;
    address _permutation_argument_address;
    address _lookup_argument_address;
    address _commitment_contract_address;
    uint8   constant f_parts = 8;   // Individually on parts
    uint64  constant z_offset = $Z_OFFSET$;
    uint64  constant table_offset = z_offset + 0x20 * 10;
    uint64  constant z_end = 0x35 * 0x20;
    uint64  constant rows_amount = $ROWS_AMOUNT$;
    uint256 constant omega = $OMEGA$;

    function initialize(
//        address permutation_argument_address,
//        address lookup_argument_address, 
//        address gate_argument_address,
        address commitment_contract_address
    ) public{
        console.log("Initialize");
        types.transcript_data memory tr_state;
        transcript.init_transcript(tr_state, hex"");
        transcript.update_transcript_b32(tr_state, vk1);
        transcript.update_transcript_b32(tr_state, vk2);

//      _gate_argument_address = gate_argument_address;
//      _permutation_argument_address = permutation_argument_address;
//      _lookup_argument_address = lookup_argument_address;
        _commitment_contract_address = commitment_contract_address;

        ICommitmentScheme commitment_scheme = ICommitmentScheme(commitment_contract_address);
        tr_state.current_challenge = commitment_scheme.initialize(tr_state.current_challenge);
        transcript_state = tr_state.current_challenge;
    }

    function verify(
        bytes calldata blob
    ) public view{
        uint256 gas = gasleft();
        uint256 xi = basic_marshalling.get_uint256_be(blob, $EVAL_PROOF_OFFSET$);
        uint256 Z_at_xi = addmod(field.pow_small(xi, rows_amount, modulus), modulus-1, modulus);
        uint256 l0 = mulmod(
            Z_at_xi, 
            field.inverse_static(mulmod(addmod(xi, modulus - 1, modulus), rows_amount, modulus), modulus), 
            modulus
        );
        uint256[f_parts] memory F;

        console.log("l0 = ", l0);

        //0. Check proof size
        // No direct public input

        //1. Init transcript        
        types.transcript_data memory tr_state;
        tr_state.current_challenge = transcript_state;
        // TODO: Just do something with it

        {
            //2. Push variable_values commitment to transcript
            transcript.update_transcript_b32_by_offset_calldata(tr_state, blob, 0x9);

            //3. Permutation argument
            uint256[3] memory permutation_argument = modular_permutation_argument_$TEST_NAME$.verify(
                blob[$Z_OFFSET$:$TABLE_Z_OFFSET$+$QUOTIENT_OFFSET$], 
                transcript.get_field_challenge(tr_state, modulus), 
                transcript.get_field_challenge(tr_state, modulus),
                l0
            );
            F[0] = permutation_argument[0];
            F[1] = permutation_argument[1];
            F[2] = permutation_argument[2];
        }
        uint256 table_points_num = basic_marshalling.get_length(blob, $EVAL_PROOF_OFFSET$ + 0x20);

        $LOOKUP_LIBRARY_CALL$

        //5. Push permutation batch to transcript
        transcript.update_transcript_b32_by_offset_calldata(tr_state, blob, 0x31);

        {
            //6. Gate argument
            console.log(table_points_num);
            modular_gate_argument_$TEST_NAME$.verify(blob[table_offset:table_offset + (table_points_num << 5)], transcript.get_field_challenge(tr_state, modulus));
        }

        // No public input gate

        {
            //7. Push quotient to transcript
            uint256[f_parts] memory alphas;
            for( uint8 i = 0; i < f_parts;){
                alphas[i] = transcript.get_field_challenge(tr_state, modulus);
            //    console.log("alpha ", i, ":", alphas[i]);
                unchecked{i++;}
            }
            transcript.update_transcript_b32_by_offset_calldata(tr_state, blob, 0x59);
        }

        //8. Commitment scheme verify_eval
        {
            ICommitmentScheme commitment_scheme = ICommitmentScheme(_commitment_contract_address);
            uint256[5] memory commitments;
            commitments[0] = uint256(vk2);
            for(uint16 i = 1; i < $BATCHES_NUM$;){
                commitments[i] = basic_marshalling.get_uint256_be(blob, 0x9 + (i-1)*(0x28));
                unchecked{i++;}
            }
            if(!commitment_scheme.verify_eval(
                blob[z_offset:], commitments, xi, tr_state.current_challenge
            )) console.log("Error from commitment scheme!");
        }

        //9. Final check
        console.log("Gas for verification:", gas-gasleft());
    }
}            
        )";

        std::string modular_permutation_argument_library_template = R"(
// SPDX-License-Identifier: Apache-2.0.
//---------------------------------------------------------------------------//
// Copyright (c) 2023 Generated by ZKLLVM-transpiler
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//---------------------------------------------------------------------------//
pragma solidity >=0.8.4;

import "../../cryptography/transcript.sol";
// Move away unused structures from types.sol
import "../../types.sol";
import "../../basic_marshalling.sol";
import "hardhat/console.sol";

library modular_permutation_argument_$TEST_NAME${
    uint256 constant modulus = $MODULUS$;
    uint256 constant permutation_size = $PERMUTATION_SIZE$;
    uint256 constant special_selectors_offset = $PERMUTATION_SIZE$ * 0x80;
    uint256 constant table_values_offset = $PERMUTATION_SIZE$ * 0x80 + 0x80;
    bytes constant zero_indices = hex"$ZERO_INDICES$";

    function uint16_from_two_bytes(bytes1 b1, bytes1 b2) internal pure returns( uint256 result){
        unchecked{
            result = uint8(b1);
            result = result << 8;
            result += uint8(b2);
        }
    }

    // Append commitments
    function verify(
        bytes calldata blob,
        uint256 beta,
        uint256 gamma,
        uint256 l0
    ) internal view returns (uint256[3] memory F){
        uint256 V_P_value = basic_marshalling.get_uint256_be(blob, table_values_offset + $PERMUTATION_TABLE_OFFSET$);

        console.log("Compute permutation argument");
        console.log("beta = ", beta);
        console.log("gamma = ", gamma);
        console.log("V_P_value = ", V_P_value);
        console.log("q_last = ", basic_marshalling.get_uint256_be(blob, special_selectors_offset));
        console.log("q_blind = ", basic_marshalling.get_uint256_be(blob, special_selectors_offset + 0x40));

        uint256 h = 1;
        uint256 g = 1;
        for(uint8 i = 0; i < permutation_size;){
            uint256 tmp = addmod(
                gamma, 
                basic_marshalling.get_uint256_be(
                    blob, table_values_offset + uint16_from_two_bytes(zero_indices[i<<1], zero_indices[(i<<1)+1])
                ), 
                modulus
            );

            g = mulmod(g,  addmod(
                mulmod(beta, basic_marshalling.get_uint256_be(blob, (i *0x40 )), modulus),
                tmp,
                modulus
            ), modulus);
            h = mulmod(h, addmod(
                mulmod(beta, basic_marshalling.get_uint256_be(blob, permutation_size * 0x40 + (i *0x40 )), modulus),
                tmp,
                modulus
                ),
                modulus
            );
            unchecked{i++;}
        }

        F[0] = mulmod(l0, addmod(1, modulus - V_P_value, modulus), modulus);
        F[1] = mulmod(
            addmod(addmod(1, modulus - basic_marshalling.get_uint256_be(blob, special_selectors_offset), modulus), modulus - basic_marshalling.get_uint256_be(blob, special_selectors_offset + 0x40), modulus),
            addmod(
                mulmod(basic_marshalling.get_uint256_be(blob, table_values_offset + $PERMUTATION_TABLE_OFFSET$ + 0x20), h, modulus),
                modulus - mulmod(V_P_value, g, modulus),
                modulus
            ),
            modulus
        );
        F[2] = mulmod(
            mulmod(basic_marshalling.get_uint256_be(blob, 0x0), V_P_value, modulus), 
            addmod(V_P_value, modulus-1, modulus),
            modulus
        );

        console.log("F[0] = ", F[0]);
        console.log("F[1] = ", F[1]);
        console.log("F[2] = ", F[2]);
    }
}            
        )";

        std::string modular_lookup_argument_library_template = R"(
// SPDX-License-Identifier: Apache-2.0.
//---------------------------------------------------------------------------//
// Copyright (c) 2023 Generated by ZKLLVM-transpiler
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//---------------------------------------------------------------------------//
pragma solidity >=0.8.4;

import "../../cryptography/transcript.sol";
// Move away unused structures from types.sol
import "../../types.sol";
import "../../cryptography/transcript.sol";
import "../../interfaces/modular_lookup_argument.sol";
import "hardhat/console.sol";

library modular_lookup_argument_$TEST_NAME${
    uint256 constant modulus = $MODULUS$;
    uint8 constant tables = 1;
    uint8 constant sorted_columns = $SORTED_COLUMNS_NUMBER$;

    function verify(        
        bytes calldata blob, // Table values and permutations' values
        bytes calldata sorted, // Sorted batch values
        uint256 lookup_commitment,
        bytes32 tr_state_before // It's better than transfer all random values
    ) internal view returns (uint256[4] memory F, bytes32 tr_state_after){
        types.transcript_data memory tr_state;
        tr_state.current_challenge = tr_state_before;

        transcript.get_field_challenge(tr_state, modulus); //theta

        transcript.update_transcript_b32(tr_state, bytes32(lookup_commitment));
        transcript.get_field_challenge(tr_state, modulus); //beta
        transcript.get_field_challenge(tr_state, modulus); //gamma
        for(uint8 i = 0; i < sorted_columns - 1;){
            transcript.get_field_challenge(tr_state, modulus); //alpha
            unchecked{i++;}
        }
        console.log("Compute lookup argument");

        tr_state_after = tr_state.current_challenge;
    }
}            
        )";

        std::string modular_gate_argument_library_template = R"(
// SPDX-License-Identifier: Apache-2.0.
//---------------------------------------------------------------------------//
// Copyright (c) 2023 Generated by ZKLLVM-transpiler
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//---------------------------------------------------------------------------//
pragma solidity >=0.8.4;

import "../../cryptography/transcript.sol";
import "../../types.sol";
import "hardhat/console.sol";

library modular_gate_argument_$TEST_NAME${
    uint256 constant modulus = $MODULUS$;

    // Append commitments
    function verify(
        bytes calldata blob,
        uint256 theta
    ) internal view returns (uint256 F){
        console.log("Compute gate argument");
        return 0;
    }
}        )";

        std::string modular_commitment_library_template = R"(
// SPDX-License-Identifier: Apache-2.0.
//---------------------------------------------------------------------------//
// Copyright (c) 2023 Generated by ZKLLVM-transpiler
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//---------------------------------------------------------------------------//
pragma solidity >=0.8.4;

import "../../cryptography/transcript.sol";
import "../../interfaces/modular_commitment.sol";
// Move away unused structures from types.sol
import "../../types.sol";
import "hardhat/console.sol";

contract modular_commitment_scheme_$TEST_NAME$ {
    uint256 constant modulus = $MODULUS$;
    uint8 constant batches_num = 5;
    uint256 _etha;

    constructor () {
        console.log("commitment_scheme constructor");
    }

    function initialize(
        bytes32 tr_state_before
    ) external returns(bytes32 tr_state_after){
        console.log("commitment_scheme initialize ");
        types.transcript_data memory tr_state;
        tr_state.current_challenge = tr_state_before;
        _etha = transcript.get_field_challenge(tr_state, modulus);
        console.log("etha = ", _etha);
        tr_state_after = tr_state.current_challenge;
    }

    // Append commitments
    function verify_eval(
        bytes calldata blob,
        uint256[5] memory commitments,                   
        uint256 challenge,
        bytes32 transcript_state
    ) external view returns (bool){
        types.transcript_data memory tr_state;
        tr_state.current_challenge = transcript_state;

        for(uint8 i = 0; i < $BATCHES_NUM$;){
            console.logBytes32(bytes32(commitments[i]));
            unchecked{i++;}
        }
        if (challenge!= transcript.get_field_challenge(tr_state, modulus)) return false;
        console.log("challenge = ", challenge);
        return true;
    }
}        
    )";
    }
}

#endif //__MODULAR_CONTRACT_TEMPLATE_HPP__